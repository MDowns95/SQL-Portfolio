/* These are my solutions to the gauntlet of practice problems at https://www.sql-practice.com/
  The practice database is a medical relational database built using SQLite
  The questions range through 17 easy, 23 medium, and 10 hard */

/* Commands covered include:
   Basics:
   	SELECT, INSERT, DELETE, UPDATE, WHERE
   Ouerry Filtering:
   	OPERATORS, ORDER BY, LIKE, IN, BETWEEN, JOIN, UNION, GROUP BY, HAVING, CASE, DISTINCT, EXISTS, ANY, ALL, IFNULL, NULL VALUES, ALIASES
   Aggregate:
   	COUNT, AVG, SUM, MAX, MIN
   Window:
   	LAG, LEAD, FIRST_VALUE, LAST_VALUE
   String:
   	CONCAT, LEN, UPPER, LOWER
   Numeric:
   	RAND, ROUND, FLOOR, CEIL, ABS, POWER, SQRT
   Date:
   	CURRENT_TIMESTAMP, YEAR, MONTH, DAY
*/

/* Easy Questions */

/* Question 1: Show first name, last name, and gender of patients who's gender is 'M' */
SELECT first_name, last_name, gender 
	FROM patients
	WHERE gender IS 'M';
  
/* Question 2: Show first name and last name of patients who does not have allergies. (null) */
SELECT first_name, last_name
	FROM patients
	WHERE allergies is NULL;

/* Question 3: Show first name of patients that start with the letter 'C' */
SELECT first_name
	FROM patients
	WHERE first_name LIKE 'C%';

/* Question 4: Show first name and last name of patients that weight within the range of 100 to 120 (inclusive) */
SELECT first_name, last_name
	FROM patients
	WHERE weight BETWEEN '100' AND '120';

/* Question 5: Update the patients table for the allergies column. 
   If the patient's allergies is null then replace it with 'NKA' */
UPDATE patients
	SET allergies = "NKA"
	WHERE allergies IS NULL;

/* Question 6: Show first name and last name concatinated into one column to show their full name. */
SELECT CONCAT(first_name, " ", last_name)
	FROM patients;

/* Question 7: Show first name, last name, and the full province name of each patient. 
   Example: 'Ontario' instead of 'ON' */
SELECT first_name, last_name, province_name
	FROM patients p
	JOIN provinces pr
		ON p.province_id = pr.province_id;

/* Question 8: Show how many patients have a birth_date with 2010 as the birth year. */
SELECT COUNT(*) 
	FROM patients
	WHERE birth_date LIKE "2010-%";

/* Question 9: Show the first_name, last_name, and height of the patient with the greatest height. */
SELECT first_name, last_name, height
	FROM patients
	ORDER BY height DESC LIMIT 1;

/* Question 10: Show all columns for patients who have one of the following patient_ids: 1,45,534,879,1000 */
SELECT * 
	FROM patients
	WHERE patient_id IS "1"
		OR patient_id IS "45"
		OR patient_id IS "534"
		OR patient_id IS "879"
		OR patient_id IS "1000";

/* Question 11: Show the total number of admissions */
SELECT COUNT(*) admission_date
	FROM admissions;

/* Question 12: Show all the columns from admissions where the patient was admitted and discharged on the same day. */
SELECT * FROM admissions
	WHERE admission_date = discharge_date;

/* Question 13: Show the total number of admissions for patient_id 579. */
SELECT patient_id, COUNT(*) AS total_admissions
	FROM admissions
	WHERE patient_id IS "573";

/* Question 14: Based on the cities that our patients live in, show unique cities that are in province_id 'NS'? */
SELECT DISTINCT city
	FROM patients
	WHERE province_id IS "NS";

/* Question 15: Write a query to find the first_name, last name and birth date of patients who have height more than 160 and weight more than 70 */
SELECT first_name, last_name, birth_date
	FROM patients
	WHERE height > "160" 
		AND weight > "70";

/* Question 16: Write a query to find list of patients first_name, last_name, and allergies from Hamilton where allergies are not null */
SELECT first_name, last_name, allergies
	FROM patients
	WHERE city IS "Hamilton"
		AND allergies IS NOT NULL
		AND allergies IS NOT "NKA";

/* Question 17: Based on cities where our patient lives in, write a query to display the list of unique city starting with a vowel (a, e, i, o, u). 
   Show the result order in ascending by city. */
SELECT city
	FROM patients
	WHERE city LIKE 'A%'
    		OR city LIKE 'E%'
    		OR city LIKE 'I%'
    		OR city LIKE 'O%'
    		OR city LIKE 'U%'
	GROUP BY city
	ORDER BY city ASC;

/* Medium Questions */


/* Question 1: Show unique birth years from patients and order them by ascending. */
SELECT distinct YEAR(birth_date)
	FROM patients
	ORDER BY birth_date;

/* Question 2: Show unique first names from the patients table which only occurs once in the list.
  For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. 
  If only 1 person is named 'Leo' then include them in the output. */
SELECT first_name
	FROM patients
	GROUP BY first_name
	HAVING COUNT(*) = 1;

/* Question 3: Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long. */
SELECT patient_id, first_name
	FROM patients
	WHERE first_name LIKE "s____%s";

/* Question 4: Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.
   Primary diagnosis is stored in the admissions table */
SELECT p.patient_id, first_name, last_name
	FROM patients p
	JOIN admissions a
		ON p.patient_id = a.patient_id
	WHERE primary_diagnosis IS "Dementia";

/* Question 5: Display every patient's first_name. 
   Order the list by the length of each name and then by alphabetically */
SELECT first_name
	FROM patients
	ORDER by LEN(first_name), first_name;

/* Question 6: Show the total amount of male patients and the total amount of female patients in the patients table.
   Display the two results in the same row. */
SELECT 
	(SELECT COUNT(*) FROM patients WHERE gender IS "M") AS male_count, 
	(SELECT count(*) FROM patients WHERE gender IS "F") AS female_count;

/* Question 7: Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. 
   Show results ordered ascending by allergies then by first_name then by last_name. */
SELECT first_name, last_name, allergies
	FROM patients
	WHERE allergies IS "Penicillin"
		OR allergies IS "Morphine"
	ORDER BY allergies, first_name, last_name;

/* Question 8: Show patient_id, diagnosis from admissions. 
   Find patients admitted multiple times for the same diagnosis. */
SELECT patient_id, primary_diagnosis
	FROM admissions
	GROUP BY patient_id, primary_diagnosis
	HAVING COUNT(*) > 1;

/* Question 9: Show the city and the total number of patients in the city.
   Order from most to least patients and then by city name ascending. */
SELECT city, count(first_name) AS num_patients 
	FROM patients
	GROUP BY city
	ORDER BY num_patients DESC;

/* Question 10: Show first name, last name and role of every person that is either patient or doctor.
The roles are either "Patient" or "Doctor"
SELECT first_name, last_name, "Patient" AS role
	FROM patients
UNION ALL 
SELECT first_name, last_name, "Physician" AS role
	FROM physicians;

/* Question 11: Show all allergies ordered by popularity. Remove NULL values from query. */
SELECT allergies, COUNT(*) AS total_diagnosis
	FROM patients
	WHERE allergies IS NOT NULL 
		AND allergies IS NOT "NKA"
	GROUP BY allergies
	ORDER BY count(*) DESC;

/* Question 12: Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. 
   Sort the list starting from the earliest birth_date. */
SELECT first_name, last_name, birth_date
	FROM patients
	WHERE birth_date between "1970%" AND "1980%"
	ORDER BY birth_date ASC;

/* Question 13: We want to display each patient's full name in a single column. 
   Their last_name in all upper letters must appear first, then first_name in all lower case letters. 
   Separate the last_name and first_name with a comma. Order the list by the first_name in descending order
   EX: SMITH,jane */
SELECT CONCAT(UPPER(last_name), ",", LOWER(first_name))
	FROM patients
	ORDER BY first_name DESC;

/* Question 14: Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000. */
SELECT province_id, SUM(height) AS sum_height
	FROM patients
	GROUP BY province_id
	ORDER BY sum_height DESC
		LIMIT 4;

/* Question 15: Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni' */
SELECT MAX(weight)-MIN(weight) AS weight_delta
	FROM patients
	WHERE last_name IS "Maroni";

/* Question 16: Show all of the days of the month (1-31) and how many admission_dates occurred on that day. 
   Sort by the day with most admissions to least admissions. */
SELECT DAY(admission_date) AS day_number, COUNT(*) AS number_of_admissions
	FROM admissions
	GROUP BY day_number
	ORDER BY number_of_admissions DESC;

/* Question 17: Show all columns for patient_id 542's most recent admission_date. */
SELECT patient_id, nursing_unit_id, room, bed
	FROM admissions
	WHERE patient_id IS 542
	ORDER BY admission_date DESC
		LIMIT 1;

/* Question 18: Show patient_id, attending_doctor_id, and diagnosis for admissions that match one of the two criteria:
   1. patient_id is an odd number and attending_doctor_id is either 1, 5, or 19.
   2. attending_doctor_id contains a 2 and the length of patient_id is 3 characters. */
SELECT patient_id, attending_physician_id, primary_diagnosis
	FROM admissions
	WHERE 
		(attending_physician_id IN (1, 5, 19) AND patient_id % 2 != 0) 
		OR (attending_physician_id LIKE "%2%" AND LEN(patient_id) = 3);

/* Question 19: Show first_name, last_name, and the total number of admissions attended for each doctor.
   Every admission has been attended by a doctor. */
SELECT first_name, last_name, count(admission_date) AS admissions_total
	FROM physicians p
	JOIN admissions a
		ON p.physician_id = a.attending_physician_id
	GROUP BY physician_id;

/* Question 20: Display the total amount of patients for each province. Order by descending. */
SELECT province_name, COUNT(patient_id) AS patient_count
	FROM provinces pr
	JOIN patients pa
		ON pr.province_id = pa.province_id
	GROUP BY province_name
	ORDER BY patient_count DESC;

/* Question 21: For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem. */
SELECT CONCAT(patients.first_name, ' ', patients.last_name) AS patient_name, diagnosis, CONCAT(doctors.first_name, ' ', doctors.last_name) AS doctor_name
FROM admissions
	JOIN patients
		ON admissions.patient_id = patients.patient_id
	JOIN doctors
		ON admissions.attending_doctor_id = doctors.doctor_id;

/* Question 22: Display the number of duplicate patients based on their first_name and last_name. */
SELECT first_name, last_name, COUNT(*) AS num_of_duplicates
	FROM patients
	GROUP BY first_name, last_name;

/* Question 23: Display the number of duplicate patients based on their first_name and last_name. */
SELECT first_name, last_name, COUNT(*) AS num_of_duplicates
FROM patients
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;

/* Hard Questions */


/* Question 1: Show all of the patients grouped into weight groups.
   Show the total amount of patients in each weight group.
   Order the list by the weight group descending.
   For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc. */
SELECT COUNT(*) AS patients_in_group, FLOOR(weight / 10) * 10 AS weight_group
	FROM patients
	GROUP by weight_group
	ORDER by weight_group DESC;

/* Question 2: Show patient_id, weight, height, isObese from the patients table. 
   Display isObese as a boolean 0 or 1. Obese is defined as weight(kg)/(height(m)2) >= 30. 
   Weight is in units kg. Height is in units cm. */
SELECT patient_id, weight, height, 
	CASE
    		WHEN weight / POWER(height / 100.0, 2) >= 30 THEN 1
        	ELSE 0
	END AS isObese
	FROM patients;

/* Question 3: Show patient_id, first_name, last_name, and attending doctor's specialty.
   Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'
   Check patients, admissions, and doctors tables for required information. */
SELECT pa.patient_id, pa.first_name, pa.last_name, specialty AS attending_physician_specialty
	FROM patients pa
	JOIN admissions ad
		ON pa.patient_id = ad.patient_id
	JOIN physicians ph
		ON ad.attending_physician_id = ph.physician_id
	WHERE ph.first_name IS "Lisa"
		AND primary_diagnosis IS "Dementia";

/* Question 4: All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password
   The password must be the following, in order:
      1. patient_id
      2. the numerical length of patient's last_name
      3. year of patient's birth_date
SELECT p.patient_id, CONCAT(p.patient_id, LEN(p.last_name), YEAR(birth_date)) AS temp_password
	FROM patients p
	JOIN admissions ad
		ON p.patient_id = ad.patient_id
	GROUP BY p.patient_id;

/* Question 5: Each admission costs $50 for patients without insurance, and $10 for patients with insurance. 
   All patients with an even patient_id have insurance.
   Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. 
   Add up the admission_total cost for each has_insurance group. */
SELECT 
	CASE
    		WHEN patient_id %  2 = 0 THEN "Yes"
        	ELSE "No"
	END AS has_insurance,
	CASE
    		WHEN patient_id %  2 = 0 THEN COUNT(*)*10
		ELSE COUNT(*)*50
	END AS cost_after_insurance
	FROM admissions
	GROUP BY has_insurance;

/* Question 6: Show the provinces that has more patients identified as 'M' than 'F'. 
   Must only show full province_name */
SELECT province_name
	FROM provinces pr
	JOIN patients pa
		ON pr.province_id = pa.province_id
	GROUP BY pr.province_id
	HAVING
		COUNT( CASE WHEN gender = "M" THEN 1 END) > COUNT( CASE WHEN gender = "F" THEN 1 END);

/* Question 7: We are looking for a specific patient. 
   Pull all columns for the patient who matches the following criteria:
      - First_name contains an 'r' after the first two letters.
      - Identifies their gender as 'F'
      - Born in February, May, or December
      - Their weight would be between 60kg and 80kg
      - Their patient_id is an odd number
      - They are from the city 'Kingston'
SELECT * FROM patients
	WHERE first_name LIKE "__%r%"
		AND gender = "F"
		AND birth_date = "1994-02-08"
		AND weight between 60 AND 80
		AND patient_id % 2 != 0
		AND city = "Halifax";

/* Question 8: Show the percent of patients that have 'M' as their gender. 
   Round the answer to the nearest hundredth number and in percent form. */
SELECT CONCAT(round(
	(SELECT COUNT(*)
		FROM patients
		WHERE gender = "M") / CAST(COUNT(*) AS FLOAT), 4) * 100, "%") AS percentage_of_male_patients
	FROM patients;

/* Question 9: For each day display the total amount of admissions on that day. 
   Display the amount changed from the previous date.
SELECT admission_date, 
   COUNT(admission_date) AS admission_day, 
   COUNT(admission_date) - LAG(COUNT(admission_date)) OVER(ORDER BY admission_date) AS admission_count_change
	FROM admissions
	GROUP BY admission_date;

/* Question 10: Sort the province names in ascending order in such a way that the province 'Ontario' is always on top.
SELECT province_name
	FROM province_names
	ORDER BY
		CASE 
			WHEN province_name = 'Ontario' THEN 0
			ELSE 1
		END;

